import Image from 'next/image';
import { useRef, useState, useEffect } from 'react';
import axios from 'axios';
import { useRouter } from 'next/router';
import dbConnect from '@/middleware/mongoose';
import Product from '@/models/product';

const Slug = ({ addToCart, product, varients }) => {
	const pincode = useRef();
	const [isServicable, setIsServicable] = useState(null);
	const router = useRouter();
	const slug = router.query.slug;
	const [pin, setPin] = useState();
	const [service, setService] = useState();

	const checkServiceability = async () => {
		let pins = await axios.get('http://localhost:3000/api/pincode');
		let pinJson = await pins.json();
		if (pinJson.includes(parseInt(pin))) {
			setService(true);
		} else setService(false);
	};
	const onChangePin = e => {
		setPin(e.target.value);
	};

	const [Colors, setColors] = useState(Object.keys(varients));
	const [Size, setSize] = useState(Object.keys(varients[Colors[0]]));
	const [sizeValue, setSizeValue] = useState(Size[0]);

	useEffect(() => {
		document.querySelector('#colorBtn').classList.add('border-black');
		document.querySelector('#colorBtn').classList.add('activeColor');
		document.querySelector('#colorBtn').classList.remove('border-gray-300');
	}, []);

	const pageRefresh = async size => {
		const activeColor = document.querySelector('.border-black.activeColor').style.backgroundColor;
		const response = await axios.post('http://localhost:3000/api/dbfind', { size: size, color: activeColor });
		console.log(response.data);
		window.location.href = response.data[0].slug;
		console.log(size, activeColor);
	};
	console.log(product[0].slug);
	return (
		<div>
			<section className='text-gray-600 body-font overflow-hidden'>
				<div className='container px-5 py-16 mx-auto'>
					<div className='lg:w-4/5 mx-auto flex flex-wrap'>
						<Image
							alt='ecommerce'
							className='lg:w-2/2 w-full lg:h-auto h-64 object-cover object-center rounded'
							src='https://m.media-amazon.com/images/I/71TqPqvJCQL._UL1440_.jpg'
							width={400}
							height={400}
							style={{ width: 'auto', height: 'auto' }}
						/>
						<div className='lg:w-2/2 md:w-full lg:w-[50%] lg:pl-10 lg:py-6 mt-6 lg:mt-0'>
							<h2 className='text-sm title-font text-gray-500 tracking-widest'>CODESWEAR</h2>
							<h1 className='text-gray-900 text-3xl title-font font-medium mb-2'>Wear the Code(XL/Blue)</h1>
							<div className='flex mb-4'>
								<span className='flex items-center'>
									<svg
										fill='currentColor'
										stroke='currentColor'
										strokeLinecap='round'
										strokeLinejoin='round'
										strokeWidth={2}
										className='w-4 h-4 text-pink-500'
										viewBox='0 0 24 24'>
										<path d='M12 2l3.09 6.26L22 9.27l-5 4.87 2.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-2.01L12 2z' />
									</svg>
									<svg
										fill='currentColor'
										stroke='currentColor'
										strokeLinecap='round'
										strokeLinejoin='round'
										strokeWidth={2}
										className='w-4 h-4 text-pink-500'
										viewBox='0 0 24 24'>
										<path d='M12 2l3.09 6.26L22 9.27l-5 4.87 2.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-2.01L12 2z' />
									</svg>
									<svg
										fill='currentColor'
										stroke='currentColor'
										strokeLinecap='round'
										strokeLinejoin='round'
										strokeWidth={2}
										className='w-4 h-4 text-pink-500'
										viewBox='0 0 24 24'>
										<path d='M12 2l3.09 6.26L22 9.27l-5 4.87 2.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-2.01L12 2z' />
									</svg>
									<svg
										fill='currentColor'
										stroke='currentColor'
										strokeLinecap='round'
										strokeLinejoin='round'
										strokeWidth={2}
										className='w-4 h-4 text-pink-500'
										viewBox='0 0 24 24'>
										<path d='M12 2l3.09 6.26L22 9.27l-5 4.87 2.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-2.01L12 2z' />
									</svg>
									<svg
										fill='none'
										stroke='currentColor'
										strokeLinecap='round'
										strokeLinejoin='round'
										strokeWidth={2}
										className='w-4 h-4 text-pink-500'
										viewBox='0 0 24 24'>
										<path d='M12 2l3.09 6.26L22 9.27l-5 4.87 2.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-2.01L12 2z' />
									</svg>
									<span className='text-gray-600 ml-3'>4 Reviews</span>
								</span>
								<span className='flex ml-3 pl-3 py-2 border-l-2 border-gray-200 space-x-2s'>
									<a className='text-gray-500'>
										<svg
											fill='currentColor'
											strokeLinecap='round'
											strokeLinejoin='round'
											strokeWidth={2}
											className='w-5 h-5'
											viewBox='0 0 24 24'>
											<path d='M18 2h-3a5 5 0 00-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 2 0 011-1h3z' />
										</svg>
									</a>
									<a className='text-gray-500'>
										<svg
											fill='currentColor'
											strokeLinecap='round'
											strokeLinejoin='round'
											strokeWidth={2}
											className='w-5 h-5'
											viewBox='0 0 24 24'>
											<path d='M23 3a10.9 10.9 0 01-3.14 2.53 4.48 4.48 0 00-7.86 3v1A10.66 10.66 0 013 4s-4 9 5 13a11.64 11.64 0 01-7 2c9 5 20 0 20-11.5a4.5 4.5 0 00-.08-.83A7.72 7.72 0 0023 3z' />
										</svg>
									</a>
									<a className='text-gray-500'>
										<svg
											fill='currentColor'
											strokeLinecap='round'
											strokeLinejoin='round'
											strokeWidth={2}
											className='w-5 h-5'
											viewBox='0 0 24 24'>
											<path d='M21 11.5a8.38 8.38 0 01-.9 3.8 8.5 8.5 0 01-7.6 4.7 8.38 8.38 0 01-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 01-.9-3.8 8.5 8.5 0 014.7-7.6 8.38 8.38 0 013.8-.9h.5a8.48 8.48 0 018 8v.5z' />
										</svg>
									</a>
								</span>
							</div>
							<p className='leading-relaxed'>
								Fam locavore kickstarter distillery. Mixtape chillwave tumeric sriracha taximy chia microdosing tilde DIY. XOXO
								fam indxgo juiceramps cornhole raw denim forage brooklyn. Everyday carry +2 seitan poutine tumeric. Gastropub
								blue bottle austin listicle pour-over, neutra jean shorts keytar banjo tattooed umami cardigan.
							</p>
							<div className='flex mt-6 items-center pb-5 border-b-2 border-gray-100 mb-5'>
								<div className='flex'>
									<span className='mr-3'>Color</span>
									{Colors.map(color => (
										<button
											key={color}
											className='border-2 border-gray-300 rounded-full w-6 h-6 ml-1'
											style={{ backgroundColor: color }}
											id='colorBtn'
											onClick={e => {
												const allColorBtn = Array.from(document.querySelectorAll('#colorBtn'));
												allColorBtn.forEach(colorBtn => {
													colorBtn.classList.remove('border-black');
													colorBtn.classList.add('border-gray-300');
													colorBtn.classList.remove('.activeColor');
												});
												e.target.classList.remove('border-gray-300');
												e.target.classList.add('border-black');
												e.target.classList.add('activeColor');
											}}></button>
									))}
								</div>
								<div className='flex ml-6 items-center'>
									<span className='mr-3'>Size</span>
									<div className='relative'>
										<select
											className='rounded border appearance-none border-gray-300 py-2 focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-500 text-base pl-3 pr-10'
											value={sizeValue}
											onChange={e => {
												setSizeValue(e.target.value);
												pageRefresh(e.target.value);
											}}>
											{Size.map(size => (
												<option key={size} defaultChecked>
													{size}
												</option>
											))}
										</select>
										<span className='absolute right-0 top-0 h-full w-10 text-center text-gray-600 pointer-events-none flex items-center justify-center'>
											<svg
												fill='none'
												stroke='currentColor'
												strokeLinecap='round'
												strokeLinejoin='round'
												strokeWidth={2}
												className='w-4 h-4'
												viewBox='0 0 24 24'>
												<path d='M6 9l6 6 6-6' />
											</svg>
										</span>
									</div>
								</div>
							</div>
							<div className='flex'>
								<span className='title-font font-medium text-2xl text-gray-900'>$58.00</span>
								<button
									className='flex ml-4 text-white bg-pink-500 border-0 lg:py-2 lg:px-6 focus:outline-none hover:bg-pink-600 rounded md:p-4 md:px-2 items-center justify-center p-2'
									onClick={() => addToCart(slug, 1, 499, 'wear the code', 'XL', 'Red')}>
									Add to cart
								</button>
								<button className='flex text-white ml-4 bg-pink-500 border-0 lg:py-2 lg:px-6 focus:outline-none hover:bg-pink-600 rounded md:p-4 md:px-2 items-center justify-center p-2'>
									Buy Now
								</button>
								<button className='rounded-full w-10 h-10 bg-gray-200 p-0 border-0 inline-flex items-center justify-center text-gray-500 ml-4'>
									<svg
										fill='currentColor'
										strokeLinecap='round'
										strokeLinejoin='round'
										strokeWidth={2}
										className='w-5 h-5'
										viewBox='0 0 24 24'>
										<path d='M20.84 4.61a5.5 5.5 0 00-7.78 0L12 5.67l-2.06-2.06a5.5 5.5 0 00-7.78 7.78l1.06 2.06L12 21.23l7.78-7.78 2.06-2.06a5.5 5.5 0 000-7.78z' />
									</svg>
								</button>
							</div>
							<div className='flex justify-between mt-5'>
								<input
									type='number'
									name='pincode'
									id='pincode'
									className='border-solid border no-spinner border-black'
									ref={pincode}
								/>
								<button
									onClick={checkServiceability}
									className='flex ml-4 mr-auto text-white bg-pink-500 border-0 py-2 px-6 focus:outline-none hover:bg-pink-600 rounded'>
									Check
								</button>
							</div>
							<div className='mt-4'>
								<span>
									{isServicable === null
										? 'Please check pincode eligibility'
										: isServicable
										? 'Your Pincode is servicable'
										: "We don't deliver at your pincode Yet!"}
								</span>
							</div>
						</div>
					</div>
				</div>
			</section>
		</div>
	);
};

export default Slug;

export async function getServerSideProps(context) {
	await dbConnect();

	let varient =
		(await Product.find({ title: context.query.slug })).length === 0
			? await Product.find({ slug: context.query.slug })
			: await Product.find({ title: context.query.slug });

	let colorSizeSlug = {};

	if (varient.length > 1) {
		varient.forEach(item => {
			if (item.color in colorSizeSlug) {
				colorSizeSlug[item.color][item.size] = { slug: item.slug };
			} else {
				colorSizeSlug[item.color] = { [item.size]: { slug: item.slug } };
			}
		});
	} else {
		for (const item of varient) {
			const itemColor = item.color;

			const allProducts = await Product.find({ title: item.title, color: item.color });
			allProducts.forEach(item => {
				if (item.color in colorSizeSlug) {
					colorSizeSlug[item.color][item.size] = { slug: item.slug };
				} else {
					colorSizeSlug[item.color] = { [item.size]: { slug: item.slug } };
				}
			});
		}
	}

	return {
		props: { product: JSON.parse(JSON.stringify(varient)), varients: JSON.parse(JSON.stringify(colorSizeSlug)) },
	};
}
